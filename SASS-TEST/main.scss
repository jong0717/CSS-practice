.container {
    $container-size: 100px;
    $container-color: tomato;
    width: 500px;
    height: 300px;

    .item {
        width: $container-size * 3;
        height: $container-size;
        background-color: $container-color;
    }

    &__box {
        width: 100px;
        height: 500px;
        background-color: purple;

        &-modifier {
            display: none;
        }
    }

    &__bg {
        background-color: royalblue;
    }

    &.container__box {
        display: block;
    }

    &:active {
        cursor: pointer;
    }

    @at-root .list {
        size: $container-size;
    }
}

.photo {
    font: {
        weight: 700;
        size: 10px;
        family: sans-serif;
    }

    ;

    margin: {
        top: 10px;
        left: 20px;
    }

    ;

    padding: {
        bottom: 40px;
        right: 30px;
    }
}

@mixin large-text {
    font : {
        size: 24px;
        weight: 700;
        family: sans-serif;
    }

    color: red;
}

.photo_circle {
    @include large-text;
}

@mixin dash-line($width, $color) {
    border: $width dashed $color;
}

.box1 {
    @include dash-line(4px, red);
}

@mixin dash-line-default($width: 1px, $color : blue) {
    @content;
    border: $width dashed $color;
}

.box2 {
    @include dash-line-default;
}

.box3 {
    @include dash-line-default() {
        position: relative;
    }

    ;
}


$fruits: (apple, orange, banana, mango);

.fruits {
    @each $fruit in $fruits {
        li.#{$fruit} {
            background: url("/images/#{$fruit}.png");
        }
    }
}


/* -=------- */

$pc-width:460px;

$break-points: ();
$break-points: map-merge((
    "pc":            unquote("(min-width:#{$pc-width})"),
    "hover":         unquote("(hover: hover)")
), $break-points);


@mixin break_point($breakpoint) {
    @each $name, $break-point in $break-points {
        @if $breakpoint == $name {
            @media #{$break-point} {
                @content
            }
        };
    };
};
.pc{
    &__bg{
        width:100%;
        @include break_point("pc"){
            background:#f5f5f5; overflow-y: scroll;
        }
    }
    &__container{
        width:100%;
        @include break_point("pc"){
            position:relative;
            width:460px;
            margin:0 auto;
            border-left: 1px solid #ddd;
            border-right: 1px solid #ddd;
            background:#ffffff;
        }
    }
}

@mixin position($p:static, $z:null, $t:null, $r:null, $b:null, $l:null) {
    position: $p;
    z-index: $z;
    top: $t;
    right: $r;
    bottom: $b;
    left: $l;
}

.top{
    @include position(absolute,100,0,0,null,0);
    width:100%;
    &-fix{
        position:fixed;
    }
}

@keyframes slideUp {
    0% {
        transform: translateY(100%);
    }
    100% {
        transform: translateY(0);
    }
}


.bot_pop{
    @include position(fixed,800,0,0,0,0);
    width:100%;
    &__bg{
        @include position(absolute,0,0,null,null,0);
        width:100%;
        height:100%;
        background-color:rgba(0,0,0,.4);
    }
    &__layer{
        @include position(absolute,$b:0,$l:0);
        width:100%;
        border-radius: 10px 10px 0 0;
        background-color:#ffffff;
        &-slide_up{
            animation:slideUp .3s ease forwards;
        }
        &-slide_down{
            animation:slideDown .3s ease forwards;
        }
    }
}

.a {
    color: purple;
}

.a_txt {
    color: inherit;
}


@mixin txt_cut($line:null){
    @if($line == null) {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    } @else {
        display:-webkit-box;
        -webkit-line-clamp: $line;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        word-break: break-all;
    }
}

.header {
    &__tit{
        flex:1;
        overflow: hidden;
        &-center{
            justify-content: center;
        }
        &_txt{

            @include txt_cut();
        }
    }
}